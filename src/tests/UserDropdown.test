import React from "react";
import { render, screen } from "@testing-library/react";
import UserDropdown from "../components/header/UserDropdown";
// import { useAuth } from "../utils/AuthContext";

// jest.mock("firebase/app", () => ({
//   initializeApp: jest.fn().mockReturnValue({
//     name: "[DEFAULT]",
//   }),
// }));

// jest.mock("firebase/auth", () => ({
//   getAuth: jest.fn().mockReturnValue({
//     currentUser: {
//       getIdTokenResult: jest.fn().mockResolvedValue({
//         claims: {},
//       }),
//       providerData: [
//         {
//           providerId: "mock-provider-id",
//         },
//       ],
//     },
//     signOut: jest.fn(),
//   }),
//   GoogleAuthProvider: jest.fn().mockReturnValue({}),
//   signInWithPopup: jest.fn().mockResolvedValue({
//     user: {},
//   }),
// }));

// jest.mock("firebase/firestore", () => ({
//   getFirestore: jest.fn().mockReturnValue({
//     collection: jest.fn().mockReturnValue({
//       doc: jest.fn().mockReturnValue({
//         get: jest.fn().mockResolvedValue({
//           data: jest.fn().mockReturnValue({}),
//         }),
//       }),
//     }),
//   }),
// }));

// jest.mock("firebase/functions", () => ({
//   getFunctions: jest.fn().mockReturnValue({
//     httpsCallable: jest.fn().mockReturnValue(() => ({})),
//   }),
//   httpsCallable: jest.fn(),
// }));

// jest.mock("../utils/AuthContext", () => ({
//   useAuth: jest.fn(),
// }));

describe("UserDropdown", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("renders user dropdown when user is logged in", () => {
    const mockUser = { displayName: "John Doe" };
    useAuth.mockReturnValue({ user: mockUser, logoutUser: jest.fn() });

    render(<UserDropdown />);

    expect(screen.getByText("John Doe")).toBeInTheDocument();
  });

  test("does not render user dropdown when user is not logged in", () => {
    useAuth.mockReturnValue({ user: null, logoutUser: jest.fn() });

    render(<UserDropdown />);

    expect(screen.queryByText("John Doe")).not.toBeInTheDocument();
    expect(
      screen.queryByText((content, element) => {
        return (
          element.tagName.toLowerCase() === "button" &&
          content.includes("Sign In")
        );
      })
    ).toBeInTheDocument();
  });
});
